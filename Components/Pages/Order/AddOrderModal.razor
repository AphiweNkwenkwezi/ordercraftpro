@using OrderCraftPro.Models
@using OrderCraftPro.Services.Interfaces

@inject IOrderService OrderService
@inject ICustomerService CustomerService

@if (IsVisible)
{
    <div class="modal-overlay">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Add Order</h5>
                            <button type="button" class="close-button" @onclick="CloseModal">
                                <span aria-hidden="true" class="close-icon">&times;</span>
                            </button>
                        </div>
                        <EditForm Model="@newOrder" OnValidSubmit="AddOrder" id="addOrderModal">
                            <div class="modal-body">
                                <div class="form-group">
                                    <label for="addOrderName">Order Name</label>
                                    <InputText class="form-control" id="addOrderName" @bind-Value="@newOrder.OrderNumber" />
                                    <ValidationMessage For="@(() => newOrder.OrderNumber)" />
                                </div>

                                <div class="form-group">
                                    <label for="orderType">Order Type</label>
                                    <div class="dropdown">
                                        <select class="form-control dropdown-toggle" id="orderType" @bind="@newOrder.TypeId">
                                            <option selected disabled value="">Select Order Type...</option>
                                            @if (OrderTypes != null)
                                            {
                                                foreach (var type in OrderTypes)
                                                {
                                                    <option value="@type.Id">@type.TypeName</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value="" disabled>Loading...</option>
                                            }
                                        </select>
                                        <div class="dropdown-toggle-icon">
                                            <i class="fas fa-chevron-down"></i>
                                        </div>
                                    </div>
                                </div>


                                <div class="form-group">
                                    <label for="orderStatus">Order Status</label>
                                    <div class="dropdown">
                                        <select class="form-control dropdown-toggle" id="orderStatusSelect" @bind="@newOrder.StatusId">
                                            <option value="" disabled selected>Select Order Status...</option>
                                            @if (OrderStatuses != null)
                                            {
                                                foreach (var type in OrderStatuses)
                                                {
                                                    <option value="@type.Id">@type.StatusName</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value="">Loading...</option>
                                            }
                                        </select>
                                        <div class="dropdown-toggle-icon">
                                            <i class="fas fa-chevron-down"></i>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="orderPlaced">Order Placed</label>
                                    <InputDate class="form-control" id="orderPlaced" @bind-Value="@newOrder.OrderPlaced" />
                                    <ValidationMessage For="@(() => newOrder.OrderPlaced)" />
                                </div>

                                <div class="form-group">
                                    <label for="orderFulfilled">Order Fulfilled</label>
                                    <InputDate class="form-control" id="orderFulfilled" @bind-Value="@newOrder.OrderFulfilled" />
                                    <ValidationMessage For="@(() => newOrder.OrderFulfilled)" />
                                </div>

                                <div class="form-group">
                                    <label for="customerId">Customer</label>
                                    <div class="dropdown">
                                        <select class="form-control" id="customerId" @bind="@newOrder.CustomerId">
                                            <option value="" disabled selected>Select Order Customer...</option>
                                            @if (Customers != null)
                                            {
                                                foreach (var customer in Customers)
                                                {
                                                    <option value="@customer.Id">@customer.FirstName</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value="">Loading...</option>
                                            }
                                        </select>
                                        <div class="dropdown-toggle-icon">
                                            <i class="fas fa-chevron-down"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                                <button type="button" class="btn btn-success" @onclick="AddOrder">Save</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@* <script>
    // Wait for the DOM content to be fully loaded
    document.addEventListener("DOMContentLoaded", function () {
        // Check if the modal element exists
        var modal = document.getElementById("addOrderModal");
        if (modal) {
            // If the modal exists, attach the event listener
            modal.addEventListener("shown.bs.modal", function () {
                console.log("Modal shown event triggered");
                addPlaceholderToOrderStatus();
            });
        } else {
            console.log("Modal element not found");
        }
    });

    function addPlaceholderToOrderStatus() {
        var orderStatusSelect = document.getElementById("orderStatusSelect");
        if (orderStatusSelect) {
            var placeholderOption = document.createElement("option");
            placeholderOption.text = "Select Order Status...";
            placeholderOption.disabled = true;
            placeholderOption.selected = true;
            orderStatusSelect.add(placeholderOption);
            orderStatusSelect.focus(); // Focus the select element
        } else {
            console.log("Order status element not found");
        }
    }
</script> *@

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public IEnumerable<OrderType> OrderTypes { get; set; }
    private List<OrderType> orderTypes;
    [Parameter]
    public IEnumerable<OrderStatus> OrderStatuses { get; set; }
    private List<OrderStatus> orderStatuses;
    [Parameter]
    public IEnumerable<Customer> Customers { get; set; }
    private List<Customer> customers;

    private Order newOrder = new Order()
    {
        OrderPlaced = DateTime.Today
    };

    private async Task AddOrder()
    {
        await OrderService.AddOrderAsync(newOrder);
        await IsVisibleChanged.InvokeAsync(false);
    }
    private void CloseModal()
    {
        IsVisible = false;
        IsVisibleChanged.InvokeAsync(false);
    }
    protected override void OnParametersSet()
    {
        orderTypes = OrderTypes != null ? OrderTypes.ToList() : new List<OrderType>();
        orderStatuses = OrderStatuses != null ? OrderStatuses.ToList() : new List<OrderStatus>();
        customers = Customers != null ? Customers.ToList() : new List<Customer>();
    }
}

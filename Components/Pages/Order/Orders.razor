@page "/orders"

@using OrderCraftPro.Enums
@using OrderCraftPro.Models
@using OrderCraftPro.Services.Interfaces

@inject IOrderService OrderService
@inject ICustomerService CustomerService
@inject IOrderStatusService OrderStatusService
@inject IOrderTypeService OrderTypeService
@inject NavigationManager NavigationManager

<PageTitle>Orders</PageTitle>

<h1>Orders</h1>


<input type="text" @bind="searchText" placeholder="Search by Order Number" />

@if (orders != null && orders.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Order Number</th>
                <th>Type</th>
                <th>Status</th>
                <th>Customer</th>
                <th>Order Placed</th>
                <th>Order Fulfilled</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.OrderNumber</td>
                    <td>@order.OrderType.TypeName</td>
                    <td>@order.OrderStatus.StatusName</td>
                    <td>@order.Customer.FirstName</td>
                    <td>@order.OrderPlaced.ToShortDateString()</td>
                    <td>@(order.OrderFulfilled.HasValue ? order.OrderFulfilled.Value.ToShortDateString() : "Not Fulfilled")</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditOrder(order)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteOrder(order.Id)">Remove</button>
                    </td>
                </tr>
                @if (expandedOrderId == order.Id)
                {
                    <tr>
                        <td colspan="6">
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>Line Number</th>
                                        <th>Product Code</th>
                                        <th>Product Type</th>
                                        <th>Product Cost Price</th>
                                        <th>Product Sales Price</th>
                                        <th>Quantity</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var line in order.OrderLines)
                                    {
                                        <tr>
                                            <td>@line.LineNumber</td>
                                            <td>@line.Product.ProductCode</td>
                                            <td>@line.Product.ProductType.TypeName</td>
                                            <td>@line.Product.Price</td>
                                            <td>@line.SalesPrice</td>
                                            <td>@line.Quantity</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
else
{
    <p>No orders found.</p>
}

<button class="btn btn-primary" @onclick="ShowAddOrderModal">Add Order</button>

<AddOrderModal IsVisible="showAddModal"
               IsVisibleChanged="@((bool isVisible) => showAddModal = isVisible)"
               OrderTypes="@orderTypes"
               OrderStatuses="@orderStatuses"
               Customers="@customers" />

<EditOrderModal IsVisible="showEditModal"
                IsVisibleChanged="@((bool isVisible) => showEditModal = isVisible)"
                OrderTypes="orderTypes"
                OrderStatuses="orderStatuses"
                Customers="customers"
                EditedOrder="editedOrder" />

@code {
    private List<Order> orders = null!;
    private Guid? expandedOrderId;
    private string searchText = null!;

    private bool showEditModal;
    private bool showAddModal;

    private List<Customer> customers = null!;
    private List<OrderType> orderTypes = null!;
    private List<OrderStatus> orderStatuses = null!;

    private Order editedOrder = new Order();

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetAllCustomersAsync();
        orderTypes = await OrderTypeService.GetOrderTypesAsync();
        orderStatuses = await OrderStatusService.GetOrderStatusesAsync();
        orders = await OrderService.GetOrdersAsync();

    }

    private void DeleteOrder(Guid orderId)
    {
        var orderToDelete = orders.FirstOrDefault(o => o.Id == orderId);
        if (orderToDelete != null)
        {
            orders.Remove(orderToDelete);
        }
    }
    private void ShowAddOrderModal()
    {
        showAddModal = true;
    }
    private void EditOrder(Order order)
    {
        editedOrder = order;
        showEditModal = true;        
    }
}

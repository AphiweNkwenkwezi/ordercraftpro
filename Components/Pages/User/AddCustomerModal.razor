@using OrderCraftPro.Models
@using OrderCraftPro.Services.Interfaces

@inject ICustomerService CustomerService

@if (IsVisible)
{
    <div class="modal-overlay">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addCustomerModalLabel">Add User</h5>
                            <button type="button" class="close-button" @onclick="CloseModal">
                                <span aria-hidden="true" class="close-icon">&times;</span>
                            </button>
                        </div>
                        <EditForm Model="@newCustomer" OnValidSubmit="AddCustomer">
                            <div class="modal-body">
                                <!-- Add customer form goes here -->
                                <div class="form-group">
                                    <label for="addFirstName">First Name</label>
                                    <InputText class="form-control" id="addFirstName" @bind-Value="@newCustomer.FirstName" />
                                    <ValidationMessage For="@(() => newCustomer.FirstName)" />
                                </div>
                                <div class="form-group">
                                    <label for="addLastName">Last Name</label>
                                    <InputText class="form-control" id="addLastName" @bind-Value="@newCustomer.LastName" />
                                    <ValidationMessage For="@(() => newCustomer.LastName)" />
                                </div>
                                <div class="form-group">
                                    <label for="addPhone">Phone</label>
                                    <InputText class="form-control" id="addPhone" @bind-Value="@newCustomer.Phone" />
                                    <ValidationMessage For="@(() => newCustomer.Phone)" />
                                </div>
                                <div class="form-group">
                                    <label for="addEmail">Email</label>
                                    <InputText type="email" class="form-control" id="addEmail" @bind-Value="@newCustomer.Email" />
                                    <ValidationMessage For="@(() => newCustomer.Email)" />
                                </div>
                                <div class="form-group">
                                    <label for="addAddress">Address</label>
                                    <InputText class="form-control" id="addAddress" @bind-Value="@newCustomer.Address" />
                                    <ValidationMessage For="@(() => newCustomer.Address)" />
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                                <button type="submit" class="btn btn-success">Save</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    private Customer newCustomer = new Customer();

    private async Task AddCustomer()
    {
        await CustomerService.AddCustomerAsync(newCustomer);
        // await hubConnection.SendAsync("SendCustomerAddedNotification");
        await IsVisibleChanged.InvokeAsync(false);
    }

    private void CloseModal()
    {
        IsVisible = false;
        IsVisibleChanged.InvokeAsync(false);
    }
}

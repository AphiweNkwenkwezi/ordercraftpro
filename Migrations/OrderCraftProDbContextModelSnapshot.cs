// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderCraftPro.Data;

#nullable disable

namespace OrderCraftPro.Migrations
{
    [DbContext(typeof(OrderCraftProDbContext))]
    partial class OrderCraftProDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("OrderCraftPro.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OrderCraftPro.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0e5850b-bab7-417c-a372-9a2e0bdfde78"),
                            Address = "123 Main St",
                            Email = "john@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Phone = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("68b0e733-0ab5-47ab-8df6-ea8f79be2634"),
                            Address = "456 Oak St",
                            Email = "jane@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Phone = "9876543210"
                        },
                        new
                        {
                            Id = new Guid("f9cd9a03-4a0a-48ef-845a-10ab56f2197b"),
                            Address = "789 Elm St",
                            Email = "michael@example.com",
                            FirstName = "Michael",
                            LastName = "Johnson",
                            Phone = "5551234567"
                        });
                });

            modelBuilder.Entity("OrderCraftPro.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("OrderFulfilled")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("304bf39e-125b-4354-b56a-e5772b7a3dcb"),
                            CustomerId = new Guid("c0e5850b-bab7-417c-a372-9a2e0bdfde78"),
                            OrderNumber = "ORD001",
                            OrderPlaced = new DateTime(2024, 3, 14, 18, 43, 5, 793, DateTimeKind.Utc).AddTicks(2384),
                            StatusId = new Guid("b2485a5c-e6af-44d2-8468-c83670183dab"),
                            TypeId = new Guid("8c45ea29-e338-44b8-9ab2-3c2581bbd197")
                        },
                        new
                        {
                            Id = new Guid("53a101f4-3898-4d0f-9a4b-fc26ac090057"),
                            CustomerId = new Guid("68b0e733-0ab5-47ab-8df6-ea8f79be2634"),
                            OrderNumber = "ORD002",
                            OrderPlaced = new DateTime(2024, 3, 14, 18, 43, 5, 793, DateTimeKind.Utc).AddTicks(2388),
                            StatusId = new Guid("c540707b-2afa-447a-b4f6-3a72dc75031d"),
                            TypeId = new Guid("99eb4760-14f8-4ac3-ad7a-0bd9de095af3")
                        },
                        new
                        {
                            Id = new Guid("822e2e39-aefc-4afe-93cf-0a44ac5fd8d8"),
                            CustomerId = new Guid("f9cd9a03-4a0a-48ef-845a-10ab56f2197b"),
                            OrderNumber = "ORD003",
                            OrderPlaced = new DateTime(2024, 3, 14, 18, 43, 5, 793, DateTimeKind.Utc).AddTicks(2390),
                            StatusId = new Guid("c540707b-2afa-447a-b4f6-3a72dc75031d"),
                            TypeId = new Guid("99eb4760-14f8-4ac3-ad7a-0bd9de095af3")
                        });
                });

            modelBuilder.Entity("OrderCraftPro.Models.OrderLine", b =>
                {
                    b.Property<int>("LineNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LineNumber"));

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SalesPrice")
                        .HasColumnType("decimal(6, 2)");

                    b.HasKey("LineNumber");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderLines");

                    b.HasData(
                        new
                        {
                            LineNumber = 1,
                            CostPrice = 10.00m,
                            CreatedDate = new DateTime(2024, 3, 14, 20, 43, 5, 793, DateTimeKind.Local).AddTicks(2434),
                            OrderDate = new DateTime(2024, 3, 14, 20, 43, 5, 793, DateTimeKind.Local).AddTicks(2424),
                            OrderId = new Guid("304bf39e-125b-4354-b56a-e5772b7a3dcb"),
                            ProductId = new Guid("1a95e295-5033-4144-a47c-a2b087b5330d"),
                            Quantity = 2,
                            SalesPrice = 15.00m
                        },
                        new
                        {
                            LineNumber = 2,
                            CostPrice = 8.00m,
                            CreatedDate = new DateTime(2024, 3, 14, 20, 43, 5, 793, DateTimeKind.Local).AddTicks(2438),
                            OrderDate = new DateTime(2024, 3, 14, 20, 43, 5, 793, DateTimeKind.Local).AddTicks(2437),
                            OrderId = new Guid("53a101f4-3898-4d0f-9a4b-fc26ac090057"),
                            ProductId = new Guid("57e04ae2-f09e-47c6-9984-254ee92fcad2"),
                            Quantity = 3,
                            SalesPrice = 12.00m
                        },
                        new
                        {
                            LineNumber = 3,
                            CostPrice = 15.00m,
                            CreatedDate = new DateTime(2024, 3, 14, 20, 43, 5, 793, DateTimeKind.Local).AddTicks(2440),
                            OrderDate = new DateTime(2024, 3, 14, 20, 43, 5, 793, DateTimeKind.Local).AddTicks(2440),
                            OrderId = new Guid("822e2e39-aefc-4afe-93cf-0a44ac5fd8d8"),
                            ProductId = new Guid("d13d30ea-f597-4317-8ec1-bdff5e4276d4"),
                            Quantity = 1,
                            SalesPrice = 20.00m
                        });
                });

            modelBuilder.Entity("OrderCraftPro.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2485a5c-e6af-44d2-8468-c83670183dab"),
                            StatusName = "New"
                        },
                        new
                        {
                            Id = new Guid("8e15aa01-2220-4f5c-991a-a318b15caa46"),
                            StatusName = "Processing"
                        },
                        new
                        {
                            Id = new Guid("c540707b-2afa-447a-b4f6-3a72dc75031d"),
                            StatusName = "Complete"
                        });
                });

            modelBuilder.Entity("OrderCraftPro.Models.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c45ea29-e338-44b8-9ab2-3c2581bbd197"),
                            TypeName = "Normal"
                        },
                        new
                        {
                            Id = new Guid("99eb4760-14f8-4ac3-ad7a-0bd9de095af3"),
                            TypeName = "Staff"
                        },
                        new
                        {
                            Id = new Guid("46655c2b-dadf-4eb2-8353-c77fe075dd91"),
                            TypeName = "Mechanical"
                        },
                        new
                        {
                            Id = new Guid("87de9d82-1597-45f6-a83d-60349e0c8a1d"),
                            TypeName = "Perishable"
                        });
                });

            modelBuilder.Entity("OrderCraftPro.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6, 2 )");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a95e295-5033-4144-a47c-a2b087b5330d"),
                            Price = 999.99m,
                            ProductCode = "LP001",
                            ProductName = "Laptop",
                            ProductTypeId = new Guid("7f337c8c-85a9-43e1-8045-2508f6c96bfb")
                        },
                        new
                        {
                            Id = new Guid("57e04ae2-f09e-47c6-9984-254ee92fcad2"),
                            Price = 599.99m,
                            ProductCode = "SP002",
                            ProductName = "Smartphone",
                            ProductTypeId = new Guid("6ef54b45-d37b-4079-9cf0-aac8540317bb")
                        },
                        new
                        {
                            Id = new Guid("3aac9568-826d-4e70-b7e2-26f8ee8d4e3f"),
                            Price = 99.99m,
                            ProductCode = "HP003",
                            ProductName = "Headphones",
                            ProductTypeId = new Guid("6ef54b45-d37b-4079-9cf0-aac8540317bb")
                        },
                        new
                        {
                            Id = new Guid("d13d30ea-f597-4317-8ec1-bdff5e4276d4"),
                            Price = 29.99m,
                            ProductCode = "WM004",
                            ProductName = "Wireless Mouse",
                            ProductTypeId = new Guid("be194c5f-b567-44ce-aeee-8b71d316a377")
                        },
                        new
                        {
                            Id = new Guid("81c57c8d-7dc1-4b8d-a01d-7744559939ca"),
                            Price = 149.99m,
                            ProductCode = "EHD005",
                            ProductName = "External Hard Drive",
                            ProductTypeId = new Guid("6ef54b45-d37b-4079-9cf0-aac8540317bb")
                        },
                        new
                        {
                            Id = new Guid("58015626-9080-4045-ad9b-b15ea560aff8"),
                            Price = 79.99m,
                            ProductCode = "BS006",
                            ProductName = "Bluetooth Speaker",
                            ProductTypeId = new Guid("7e7d116e-ebc0-4886-8155-0f6d97828597")
                        });
                });

            modelBuilder.Entity("OrderCraftPro.Models.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f337c8c-85a9-43e1-8045-2508f6c96bfb"),
                            TypeName = "Apparel"
                        },
                        new
                        {
                            Id = new Guid("be194c5f-b567-44ce-aeee-8b71d316a377"),
                            TypeName = "Parts"
                        },
                        new
                        {
                            Id = new Guid("6ef54b45-d37b-4079-9cf0-aac8540317bb"),
                            TypeName = "Equipment"
                        },
                        new
                        {
                            Id = new Guid("7e7d116e-ebc0-4886-8155-0f6d97828597"),
                            TypeName = "Motor"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OrderCraftPro.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OrderCraftPro.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderCraftPro.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OrderCraftPro.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderCraftPro.Models.Order", b =>
                {
                    b.HasOne("OrderCraftPro.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderCraftPro.Models.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderCraftPro.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("OrderCraftPro.Models.OrderLine", b =>
                {
                    b.HasOne("OrderCraftPro.Models.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderCraftPro.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OrderCraftPro.Models.Product", b =>
                {
                    b.HasOne("OrderCraftPro.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("OrderCraftPro.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OrderCraftPro.Models.Order", b =>
                {
                    b.Navigation("OrderLines");
                });
#pragma warning restore 612, 618
        }
    }
}
